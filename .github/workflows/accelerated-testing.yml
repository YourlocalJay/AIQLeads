name: Accelerated Testing Pipeline

on:
  push:
    branches: [ main, feature/*, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  parallel-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [ai-components, cart-monitoring, performance, integration]
        python-version: [3.9, '3.10']
      fail-fast: false

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist

    - name: Run AI Component Tests
      if: matrix.test-group == 'ai-components'
      run: |
        pytest tests/ai/ -n auto --cov=src/ai --cov-report=xml
        
    - name: Run Cart & Monitoring Tests
      if: matrix.test-group == 'cart-monitoring'
      run: |
        pytest tests/cart/ tests/monitoring/ -n auto --cov=src/cart --cov=src/monitoring --cov-report=xml

    - name: Run Performance Tests
      if: matrix.test-group == 'performance'
      run: |
        pytest tests/performance/ -n auto --cov=src/performance --cov-report=xml
        
    - name: Run Integration Tests
      if: matrix.test-group == 'integration'
      run: |
        pytest tests/integration/ --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-group }}
        name: ${{ matrix.test-group }}-py${{ matrix.python-version }}

  security-scan:
    needs: parallel-testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Run Security Scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

  load-testing:
    needs: parallel-testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up k6
      run: |
        curl https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz -L | tar xvz --strip-components 1

    - name: Run Load Tests
      run: |
        ./k6 run tests/load/load-test.js

  deployment-validation:
    needs: [security-scan, load-testing]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Validate Deployment
      run: |
        python scripts/validate_deployment.py
        
    - name: Report Status
      if: always()
      uses: actions/github-script@v3
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const conclusion = "${{ job.status }}";
          
          await github.repos.createCommitStatus({
            owner,
            repo,
            sha: context.sha,
            state: conclusion.toLowerCase(),
            target_url: `https://github.com/${owner}/${repo}/actions/runs/${run_id}`,
            description: 'Deployment validation complete',
            context: 'Accelerated Testing'
          });
